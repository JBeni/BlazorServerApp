@page "/employee/add"
@page "/employee/edit/{empID:int}"

<h1>@Title Employee</h1>
<hr />

<EditForm Model="@emp" OnValidSubmit="SaveEmployee">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="emp.Name" />
        </div>
        <ValidationMessage For="@(() => emp.Name)" />
    </div>
    <div class="mb-3">
        <label for="Gender" class="form-label">Gender</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="emp.Gender">
                <option value="">-- Select Gender --</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => emp.Gender)" />
    </div>
    <div class="mb-3">
        <label for="Department" class="form-label">Department</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="emp.Department" />
        </div>
        <ValidationMessage For="@(() => emp.Department)" />
    </div>
    <div class="mb-3">
        <label for="City" class="form-label">City</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="emp.City">
                <option value="-- Select City --">-- Select City --</option>
                @foreach (var city in cityList)
                {
                    <option value="@city.CityName">@city.CityName</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => emp.City)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Inject]
    protected EmployeeService? EmployeeService { get; set; }
    [Inject]
    public NavigationManager? UrlNavigationManager { get; set; }
    [Parameter]
    public int empID { get; set; }

    protected string Title = "Add";
    public EmployeeResponse emp = new();
    protected List<CityResponse> cityList = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCityList();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (empID != 0)
        {
            Title = "Edit";
            emp = EmployeeService.GetEmployeeData(empID);
        }
    }

    protected async Task GetCityList()
    {
        cityList = EmployeeService.GetCitiesData();
    }

    protected async Task SaveEmployee()
    {
        if (emp.EmployeeId != 0)
        {
            await EmployeeService.UpdateEmployee(emp);
        }
        else
        {
            await EmployeeService.AddEmployee(emp);
        }
        Cancel();
    }

    public void Cancel()
    {
        UrlNavigationManager.NavigateTo("/employee");
    }
}
