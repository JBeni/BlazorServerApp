@page "/pizza"

@inject IPizzaService PizzaService
@attribute [Authorize]

<h3>Pizzas</h3>

<div class="row">
    <div class="col-md-6">
        <a href='/pizza/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Pizaa
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search pizza by name"
            @bind="SearchString" @bind:event="oninput" @onkeyup="FilterPizzas" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-info" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (pizzaList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (pizzaList.Count > 0)
    {
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr class="text-center">
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Size</th>
                    <th>Image Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pizza in pizzaList)
                {
                    <tr class="text-center">
                        <td>@pizza.Id</td>
                        <td>@pizza.Name</td>
                        <td>@pizza.Description</td>
                        <td>$ @pizza.Price</td>
                        <td>@pizza.Size</td>
                        <td>@pizza.ImageName</td>
                        <td>
                            <a href='/pizza/@pizza.Id' class="btn btn-outline-dark" role="button">Details</a>
                            <a href='/pizza/edit/@pizza.Id' class="btn btn-outline-dark" role="button">Edit</a>
                            <button class="btn btn-danger" @onclick="(() => { DeleteConfirm(pizza.Id); ModalShow(); })">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (showModal)
        {
            <div class="modal fade show" id="myModal" style="display:block; margin-top: 150px;" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Delete Pizza</h3>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <h4>Do you want to delete this pizza?</h4>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" @onclick="(async () => {
                                await DeletePizza(pizza.Id); ModalOk();
                            })">Delete</button>
                            <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex justify-content-center">
            <h4>No record found</h4>
        </div>
    }
}

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    protected PizzaResponse pizza = new();
    protected string SearchString { get; set; } = string.Empty;

    protected List<PizzaResponse> pizzaList = new();
    protected List<PizzaResponse> searchPizzaData = new();

    protected override void OnInitialized()
    {
        GetPizzas();
    }

    protected void GetPizzas()
    {
        pizzaList = PizzaService.GetPizzas();
        searchPizzaData = pizzaList;
    }

    protected void FilterPizzas()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            pizzaList = searchPizzaData.Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            pizzaList = searchPizzaData;
        }
    }

    protected void DeleteConfirm(int Id)
    {
        pizza = pizzaList.FirstOrDefault(x => x.Id == Id);
    }

    protected async Task DeletePizza(int empID)
    {
        await PizzaService.DeletePizza(empID);
        GetPizzas();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        pizzaList = searchPizzaData;
    }
}
